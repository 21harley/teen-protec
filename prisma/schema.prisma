generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ====================== ENUMS ======================
enum TestStatus {
  NO_INICIADO
  EN_PROGRESO
  COMPLETADO
  EVALUADO 
}

enum PesoPreguntaTipo {
  SIN_VALOR
  IGUAL_VALOR
  BAREMO
}

// ====================== MODELOS PRINCIPALES ======================
model Usuario {
  id                       Int             @id @default(autoincrement())
  nombre                   String
  telefono                 String
  email                    String          @unique
  cedula                   String          @unique
  password                 String
  password_iv              String
  fecha_nacimiento         DateTime
  sexo                     String?
  id_tipo_usuario          Int
  id_psicologo             Int?
  authToken                String?
  authTokenExpiry          DateTime?
  resetPasswordToken       String?         @unique
  resetPasswordTokenExpiry DateTime?

  // Relaciones existentes
  tipo_usuario             TipoUsuario     @relation(fields: [id_tipo_usuario], references: [id])
  adolecente               Adolecente?
  psicologo                Psicologo?
  tests                    Test[]          @relation("TestUsuario")
  respuestas               Respuesta[]
  pacientes                Usuario[]       @relation("PacientesPsicologo", fields: [], references: [])
  psicologoPacientes       Usuario?        @relation("PacientesPsicologo", fields: [id_psicologo], references: [id])
  alarmas                  Alarma[]        @relation("usuario")

  // Relaciones agregadas para Cita
  citasComoPsicologo       Cita[]          @relation("CitasPsicologo")
  citasComoPaciente        Cita[]          @relation("CitasPaciente")

  @@index([email])
  @@index([cedula])
  @@index([id_psicologo])
}

model Tutor {
  id                Int          @id @default(autoincrement())
  cedula_tutor      String       @unique
  nombre_tutor      String
  profesion_tutor   String?
  telefono_contacto String?
  correo_contacto   String?
  sexo              String?
  parentesco        String?
  adolecentes       Adolecente[]

  @@index([cedula_tutor])
}

model Test {
  id                  Int              @id @default(autoincrement())
  nombre              String?
  estado              TestStatus       @default(NO_INICIADO)
  peso_preguntas      PesoPreguntaTipo @default(SIN_VALOR)
  config_baremo       Json?
  valor_total         Float?
  fecha_creacion      DateTime         @default(now())
  fecha_ultima_respuesta DateTime?
  id_psicologo        Int?
  id_usuario          Int?

  evaluado            Boolean          @default(false)
 //editable            Boolean?         @default(true)
  fecha_evaluacion    DateTime?
  ponderacion_final      Float?           
  comentarios_psicologo String?        

  // Relaciones
  psicologo           Psicologo?       @relation("TestPsicologo", fields: [id_psicologo], references: [id_usuario])
  usuario             Usuario?         @relation("TestUsuario", fields: [id_usuario], references: [id])
  preguntas           Pregunta[]
  respuestas          Respuesta[]

  @@index([id_psicologo])
  @@index([id_usuario])
}

model Pregunta {
  id             Int          @id @default(autoincrement())
  id_test        Int
  id_tipo        Int
  id_gru_pre     Int? //sopoerte de modulo
  texto_pregunta String
  orden          Int
  obligatoria    Boolean      @default(false)
  peso           Float?
  baremo_detalle Json?
  placeholder    String?
  min            Int?
  max            Int?
  paso           Int?
  eva_psi        Int?

  // Relaciones
  test           Test         @relation(fields: [id_test], references: [id])
  tipo           TipoPregunta @relation(fields: [id_tipo], references: [id])
  grupoPregunta  GrupoPregunta? @relation(fields: [id_gru_pre], references: [id], name: "GrupoPreguntaAPreguntas")

  opciones       Opcion[]
  respuestas     Respuesta[]

  @@index([id_test])
}

model GrupoPregunta{
  id                Int          @id @default(autoincrement())
  nombre            String
  total_resp_valida Int?
  total_resp        Int?
  interpretacion    String?
  preguntas      Pregunta[]   @relation("GrupoPreguntaAPreguntas")
}



// ====================== MODELOS SECUNDARIOS ======================
model TestPlantilla {
  id                  Int              @id @default(autoincrement())
  id_psicologo        Int?
  nombre              String
  estado              TestStatus       @default(NO_INICIADO)
  peso_preguntas      PesoPreguntaTipo @default(SIN_VALOR)
  config_baremo       Json?
  valor_total         Float?
  fecha_creacion      DateTime         @default(now())
  es_global           Boolean?        @default(false)

  // Relaciones
  psicologo           Psicologo?        @relation(fields: [id_psicologo], references: [id_usuario])
  preguntas           PreguntaPlantilla[]

  @@index([id_psicologo])
}

model PreguntaPlantilla {
  id             Int          @id @default(autoincrement())
  id_test        Int
  id_tipo        Int
  id_gru_pre     Int? //sopoerte de modulo
  texto_pregunta String
  orden          Int
  obligatoria    Boolean      @default(false)
  peso           Float?
  baremo_detalle Json?
  placeholder    String?
  min            Int?
  max            Int?
  paso           Int?
  eva_psi        Int?

  // Relaciones
  test           TestPlantilla @relation(fields: [id_test], references: [id])
  tipo           TipoPregunta  @relation(fields: [id_tipo], references: [id])
  opciones       OpcionPlantilla[]
  grupoPreguntaPlantilla  GrupoPreguntaPlantilla? @relation(fields: [id_gru_pre], references: [id], name: "GrupoPreguntaAPreguntasPlantilla")

  @@index([id_test])
}

model GrupoPreguntaPlantilla{
  id                Int          @id @default(autoincrement())
  nombre            String
  total_resp_valida Int?
  total_resp        Int?
  interpretacion    String?
  preguntasPlantilla      PreguntaPlantilla[]   @relation("GrupoPreguntaAPreguntasPlantilla")
}


// ====================== MODELOS SIN CAMBIOS ======================
model TipoUsuario {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  menu        Json
  usuarios    Usuario[]
  tiposAlerta TipoAlerta[]
}

model TipoPregunta {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  descripcion String?
  tipo_respuesta String
  preguntas   Pregunta[]
  preguntasPlantilla PreguntaPlantilla[]
}

model TipoAlerta {
  id              Int       @id @default(autoincrement())
  nombre          String    @unique
  url_destino     String?
  id_tipo_usuario Int? 
  alarmas         Alarma[]
  tipo_usuario    TipoUsuario? @relation(fields: [id_tipo_usuario], references: [id])
}

model Adolecente {
  id_usuario Int     @unique
  id_tutor   Int?
  tutor      Tutor?  @relation(fields: [id_tutor], references: [id])
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
}

model Alarma {
  id             Int       @id @default(autoincrement())
  id_usuario     Int?
  id_tipo_alerta Int?
  mensaje        String
  fecha_creacion DateTime  @default(now())
  fecha_vista    DateTime?
  vista          Boolean   @default(false)
  correo_enviado Boolean   @default(false)

  // Relaciones
  usuario        Usuario?  @relation("usuario", fields: [id_usuario], references: [id])
  tipo_alerta    TipoAlerta? @relation(fields: [id_tipo_alerta], references: [id])

  // Índices
  @@index([id_usuario])
  @@index([fecha_creacion])
  @@index([vista])
}

model Psicologo {
  id_usuario         Int                  @unique
  numero_de_titulo   String?
  nombre_universidad String?
  monto_consulta     Float?
  telefono_trabajo   String?
  
  // Relaciones
  usuario            Usuario              @relation(fields: [id_usuario], references: [id])
  redes_sociales     RedSocialPsicologo[]
  tests              Test[]               @relation("TestPsicologo")
  plantillas         TestPlantilla[]     
  // Índices
  @@index([numero_de_titulo])
}

model Opcion {
  id           Int       @id @default(autoincrement())
  id_pregunta  Int
  texto        String
  valor        String
  orden        Int
  es_otro      Boolean   @default(false)

  // Relaciones
  pregunta     Pregunta  @relation(fields: [id_pregunta], references: [id])
  respuestas   Respuesta[]

  // Índices
  @@index([id_pregunta])
}

model Respuesta {
  id              Int       @id @default(autoincrement())
  id_test         Int
  id_pregunta     Int
  id_usuario      Int
  id_opcion       Int?
  texto_respuesta String?
  valor_rango     Int?
  fecha           DateTime  @default(now())
  
  // Relaciones
  test            Test      @relation(fields: [id_test], references: [id])
  pregunta        Pregunta  @relation(fields: [id_pregunta], references: [id])
  usuario         Usuario   @relation(fields: [id_usuario], references: [id])
  opcion          Opcion?   @relation(fields: [id_opcion], references: [id])
  
  // Índices
  @@index([id_test, id_usuario])
  @@index([id_pregunta])
  @@index([fecha])
}

model RedSocialPsicologo {
  id           Int        @id @default(autoincrement())
  id_psicologo Int
  nombre_red   String
  url_perfil   String
  
  // Relaciones
  psicologo    Psicologo  @relation(fields: [id_psicologo], references: [id_usuario])

  // Restricciones
  @@unique([id_psicologo, nombre_red])
}

model OpcionPlantilla {
  id           Int       @id @default(autoincrement())
  id_pregunta  Int
  texto        String    
  valor        String    
  orden        Int
  es_otro      Boolean   @default(false)

  // Relaciones
  pregunta     PreguntaPlantilla @relation(fields: [id_pregunta], references: [id])

  // Índices
  @@index([id_pregunta])
}

enum EstadoCita {
  PENDIENTE
  CONFIRMADA
  CANCELADA
  COMPLETADA
}

model Cita {
  id              Int         @id @default(autoincrement())
  titulo          String
  descripcion     String?
  fecha_inicio    DateTime
  fecha_fin       DateTime
  estado          EstadoCita  @default(PENDIENTE)
  fecha_creacion  DateTime    @default(now())
  fecha_actualizacion DateTime @updatedAt
  
  // Relaciones con el esquema existente
  id_psicologo    Int         // Referencia al psicólogo
  id_paciente     Int?        // Opcional para citas con pacientes
  id_tipo_cita    Int?        // Para clasificar tipos de citas
  
  psicologo       Usuario     @relation("CitasPsicologo", fields: [id_psicologo], references: [id])
  paciente        Usuario?    @relation("CitasPaciente", fields: [id_paciente], references: [id])
  tipo            TipoCita?   @relation(fields: [id_tipo_cita], references: [id])
  
  // Para registro histórico (similar a tu esquema de registros)
  duracion_real   Int?        // En minutos
  notas_psicologo String?
  
  // Relación agregada para RecordatorioCita
  recordatorios   RecordatorioCita[]
  
  @@index([id_psicologo])
  @@index([id_paciente])
  @@index([fecha_inicio])
  @@index([estado])
}

model TipoCita {
  id              Int         @id @default(autoincrement())
  nombre          String      @unique
  descripcion     String?
  duracion        Int         @default(30) // Duración predeterminada en minutos
  color_calendario String?    // Para identificación visual
  citas           Cita[]
}

// Tabla pivote para recordatorios de citas
model RecordatorioCita {
  id              Int         @id @default(autoincrement())
  id_cita         Int
  metodo          String      // "EMAIL", "SMS", "NOTIFICACION"
  fecha_envio     DateTime
  estado          String      // "PENDIENTE", "ENVIADO", "FALLIDO"
  
  cita            Cita        @relation(fields: [id_cita], references: [id])
  
  @@index([id_cita])
  @@index([fecha_envio])
}


// ====================== ESQUEMA DE REGISTROS/INDICADORES (AISLADO) ======================

enum Sexo {
  MASCULINO
  FEMENINO
  OTRO
}

enum EstadoTestRegistro {
  NO_INICIADO
  EN_PROGRESO
  COMPLETADO
  CANCELADO
  EVALUADO
}

// Registro snapshot de usuarios (datos desnormalizados para reporting)
model RegistroUsuario {
  id               Int       @id @default(autoincrement())
  usuario_id       Int
  fecha_registro   DateTime  @default(now())
  sexo             String
  fecha_nacimiento DateTime?
  tipo_usuario     String
  psicologo_id     Int?

  tests_ids        Json?     // Ej: [1, 2, 3]
  total_tests      Int       @default(0)

  // Relaciones
  trazabilidades   RegistroTrazabilidad[]
  metricas         RegistroMetricaUsuario[]
  sesiones         RegistroSesion[]

  @@index([usuario_id])
  @@index([psicologo_id])
}

// Trazabilidad de atención (sin FK a tablas principales)
model RegistroTrazabilidad {
  id               Int       @id @default(autoincrement())
  registro_usuario_id Int
  psicologo_id     Int       // ID referencia
  fecha_inicio     DateTime
  fecha_fin        DateTime?
  secuencia        Int       // 1 = primer psicólogo, 2 = segundo, etc.
  
  // Relación solo dentro del esquema de registros
  usuario          RegistroUsuario @relation(fields: [registro_usuario_id], references: [id])
  
  @@index([registro_usuario_id])
  @@index([psicologo_id])
}

// Registro de sesiones 
model RegistroSesion {
  id                  Int       @id @default(autoincrement())
  registro_usuario_id Int
  fecha_inicio        DateTime  @default(now())
  fecha_fin           DateTime?
  duracion            Int?      // En minutos (calculado automáticamente)
  ip_address          String?
  user_agent          String?
  
  // Relación con el usuario en el esquema de registros
  usuario             RegistroUsuario @relation(fields: [registro_usuario_id], references: [id])
  
  // Índices para análisis
  @@index([registro_usuario_id])
  @@index([fecha_inicio])
}

// Métricas por usuario
model RegistroMetricaUsuario {
  id                   Int       @id @default(autoincrement())
  registro_usuario_id  Int
  fecha            DateTime  @default(now())
  tests_asignados  Int
  tests_completados Int
  tests_evaluados  Int          
  sesiones_totales Int
  
  usuario          RegistroUsuario @relation(fields: [registro_usuario_id], references: [id])
  
  @@index([registro_usuario_id, fecha])
}

// Registro  de tests
model RegistroTest {
  id               Int                 @id @default(autoincrement())
  test_id          Int
  usuario_id       Int?
  psicologo_id     Int?
  fecha_creacion   DateTime
  fecha_completado DateTime?
  estado           EstadoTestRegistro
  nombre_test      String?
  valor_total      Float?

  nota_psicologo   Float?
  evaluado         Boolean             @default(false)
  fecha_evaluacion DateTime?

  @@index([test_id])
  @@index([evaluado, fecha_completado]) 
}


// Reportes generados
model RegistroReporte {
  id               Int       @id @default(autoincrement())
  tipo             String    // "general", "psicologo", "paciente"
  parametros       Json      // Filtros usados
  fecha_generacion DateTime  @default(now())
  generado_por_id  Int?      // ID del usuario que generó el reporte
  formato          String    // "pdf", "csv", etc.
  ruta_almacenamiento String?
  
  @@index([fecha_generacion])
  @@index([generado_por_id])
}

model RegistroCita {
  id                   Int           @id @default(autoincrement())
  cita_id              Int           // ID referencia (sin FK)
  fecha_registro       DateTime      @default(now())
  
  // Datos desnormalizados de la cita
  id_psicologo         Int
  nombre_psicologo     String
  id_paciente          Int?
  nombre_paciente      String?
  fecha_cita           DateTime
  duracion_planeada    Int           // En minutos
  duracion_real        Int?          // En minutos
  estado               EstadoCita
  tipo_cita            String?
  color_calendario     String?
  
  // Métricas
  tiempo_confirmacion  Int?          // Minutos entre creación y confirmación
  cancelado_por        String?       // "PSICOLOGO", "PACIENTE", "SISTEMA"
  motivo_cancelacion   String?
  
  // Relación con esquema de registros
  registro_usuario_id  Int?          // Relación opcional con RegistroUsuario
  
  // Índices para reporting
  @@index([id_psicologo])
  @@index([id_paciente])
  @@index([fecha_cita])
  @@index([estado])
  @@index([registro_usuario_id])
}

model RegistroMetricaCitas {
  id                   Int       @id @default(autoincrement())
  fecha                DateTime  @default(now())
  periodo              String    // "DIARIO", "SEMANAL", "MENSUAL"
  
  // Métricas agregadas
  citas_totales        Int
  citas_completadas    Int
  citas_canceladas     Int
  tasa_confirmacion    Float
  tiempo_promedio_confirmacion Int  // En minutos
  duracion_promedio    Float
  
  // Desglose por tipo
  tipos_cita           Json      // Ej: {"EVALUACION": 5, "SEGUIMIENTO": 3}
  
  // Índices
  @@index([fecha])
  @@index([periodo])
}

/*
// Problemas/mejoras
model RegistroProblema {
  id               Int       @id @default(autoincrement())
  reportado_por_id Int       // ID del usuario
  descripcion      String
  categoria        String
  prioridad        Int       @default(3)
  fecha            DateTime  @default(now())
  estado           String    @default("pendiente")
  
  @@index([reportado_por_id])
  @@index([estado])
  @@index([fecha])
}

*/
