generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique @db.VarChar(50)
  menu     Json[]    @default([])
  usuarios Usuario[]
}

model TipoAlerta {
  id      Int     @id @default(autoincrement())
  nombre  String  @unique @db.VarChar(50)
  alarmas Alarma[]
}

model Usuario {
  id                       Int             @id @default(autoincrement())
  nombre                   String          @db.VarChar(255)
  email                    String          @unique @db.VarChar(255)
  cedula                   String          @unique @db.VarChar(20)
  password                 String          @db.VarChar(255)
  password_iv              String          @db.VarChar(255)
  fecha_nacimiento         DateTime        @db.Date
  id_tipo_usuario          Int
  authToken                String?         @db.VarChar(255)
  authTokenExpiry          DateTime?
  resetPasswordToken       String?         @unique @db.VarChar(255)
  resetPasswordTokenExpiry DateTime?
  adolecente               Adolecente?
  alarmas                  Alarma[]
  psicologo                Psicologo?
  respuestas               Respuesta[]
  tests                    Test[]          @relation("TestUsuario")
  tipo_usuario             TipoUsuario     @relation(fields: [id_tipo_usuario], references: [id])
}

model Tutor {
  id                Int          @id @default(autoincrement())
  cedula            String       @unique @db.VarChar(20)
  nombre            String       @db.VarChar(255)
  profesion_tutor   String?      @db.VarChar(100)
  telefono_contacto String?      @db.VarChar(20)
  correo_contacto   String?      @db.VarChar(255)
  adolecentes       Adolecente[]
}

model Adolecente {
  id_usuario Int     @id
  id_tutor   Int?
  tutor      Tutor?  @relation(fields: [id_tutor], references: [id])
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
}

model Alarma {
  id             Int       @id @default(autoincrement())
  id_usuario     Int?
  id_tipo_alerta Int?
  mensaje        String
  fecha_creacion DateTime  @default(now()) @db.Timestamp(0)
  fecha_vista    DateTime? @db.Timestamp(0)
  vista          Boolean   @default(false)
  url_destino    String?   @db.VarChar(255)
  usuario        Usuario?  @relation(fields: [id_usuario], references: [id])
  tipo_alerta    TipoAlerta? @relation(fields: [id_tipo_alerta], references: [id])
}

model Psicologo {
  id_usuario         Int                  @id
  numero_de_titulo   String?              @db.VarChar(100)
  nombre_universidad String?              @db.VarChar(255)
  monto_consulta     Float?
  telefono_trabajo   String?              @db.VarChar(20)
  usuario            Usuario              @relation(fields: [id_usuario], references: [id])
  redes_sociales     RedSocialPsicologo[]
  tests              Test[]               @relation("TestPsicologo")
  plantillas         TestPlantilla[] 
}

model Test {
  id                  Int          @id @default(autoincrement())
  id_psicologo        Int?
  id_usuario          Int?
  nombre             String?       @db.VarChar(50)
  estado              TestStatus   @default(no_iniciado)
  progreso            Int          @default(0) // 0-100%
  fecha_creacion      DateTime     @default(now())
  fecha_ultima_respuesta DateTime?
  preguntas           Pregunta[]
  respuestas          Respuesta[]
  psicologo           Psicologo?   @relation("TestPsicologo", fields: [id_psicologo], references: [id_usuario])
  usuario             Usuario?     @relation("TestUsuario", fields: [id_usuario], references: [id])

  @@index([id_psicologo])
  @@index([id_usuario])
  @@index([nombre])
  @@index([fecha_creacion])
  @@index([estado])
}

enum TestStatus {
  no_iniciado
  en_progreso
  completado
}

model TipoPregunta {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique @db.VarChar(50) // radio, checkbox, text, select, range
  descripcion String     @db.VarChar(255)
  preguntas   Pregunta[]
  preguntasPlantilla PreguntaPlantilla[]
}

model Pregunta {
  id             Int          @id @default(autoincrement())
  id_test        Int
  id_tipo        Int
  texto_pregunta String
  orden          Int
  obligatoria    Boolean      @default(false)
  placeholder    String?      @db.VarChar(255) // Para inputs de texto
  min            Int?         // Para rangos
  max            Int?         // Para rangos
  paso           Int?         // Para rangos (ej. de 1 en 1, de 5 en 5)
  
  test           Test         @relation(fields: [id_test], references: [id])
  tipo           TipoPregunta @relation(fields: [id_tipo], references: [id])
  opciones       Opcion[]     // Para radio/checkbox/select
  respuestas     Respuesta[]
}

model Opcion {
  id           Int       @id @default(autoincrement())
  id_pregunta  Int
  texto        String    @db.VarChar(255)
  valor        String    @db.VarChar(100)
  orden        Int
  es_otro      Boolean   @default(false) // Para opci√≥n "Otro" con input

  pregunta     Pregunta  @relation(fields: [id_pregunta], references: [id])
  respuestas   Respuesta[] // Opposite relation to Respuesta.opcion
}

model Respuesta {
  id              Int       @id @default(autoincrement())
  id_test         Int
  id_pregunta     Int
  id_usuario      Int
  id_opcion       Int?      // Para radio/checkbox/select
  texto_respuesta String?   // Para text o cuando es_otro=true
  valor_rango     Int?      // Para preguntas de rango
  fecha           DateTime  @default(now())
  
  test            Test      @relation(fields: [id_test], references: [id])
  pregunta        Pregunta  @relation(fields: [id_pregunta], references: [id])
  usuario         Usuario   @relation(fields: [id_usuario], references: [id])
  opcion          Opcion?   @relation(fields: [id_opcion], references: [id])
  
  @@index([id_test, id_usuario])
  @@index([id_pregunta])
}

model RedSocialPsicologo {
  id           Int        @id @default(autoincrement())
  id_psicologo Int?
  nombre_red   String     @db.VarChar(50)
  url_perfil   String     @db.VarChar(255)
  psicologo    Psicologo? @relation(fields: [id_psicologo], references: [id_usuario])

  @@unique([id_psicologo, nombre_red], name: "redsocial_unique")
}


model TestPlantilla {
  id                  Int          @id @default(autoincrement())
  id_psicologo        Int?
  nombre              String       @db.VarChar(50)
  estado              TestStatus   @default(no_iniciado)
  fecha_creacion      DateTime     @default(now())
  psicologo           Psicologo?   @relation(fields: [id_psicologo], references: [id_usuario])
  preguntas           PreguntaPlantilla[]
  
  @@index([id_psicologo])
  @@index([nombre])
}

model PreguntaPlantilla {
  id             Int          @id @default(autoincrement())
  id_test        Int
  id_tipo        Int
  texto_pregunta String
  orden          Int
  obligatoria    Boolean      @default(false)
  placeholder    String?      @db.VarChar(255)
  min            Int?
  max            Int?
  paso           Int?
  
  test           TestPlantilla @relation(fields: [id_test], references: [id])
  tipo           TipoPregunta  @relation(fields: [id_tipo], references: [id])
  opciones       OpcionPlantilla[]
}

model OpcionPlantilla {
  id           Int       @id @default(autoincrement())
  id_pregunta  Int
  texto        String    @db.VarChar(255)
  valor        String    @db.VarChar(100)
  orden        Int
  es_otro      Boolean   @default(false)

  pregunta     PreguntaPlantilla @relation(fields: [id_pregunta], references: [id])
}

